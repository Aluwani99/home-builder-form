name: Build and Deploy Node.js App to Azure Web App - Linux

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: 'home-builder-form'
  AZURE_WEBAPP_PACKAGE_PATH: 'release.zip'
  NODE_VERSION: '20.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout code
      - uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      # 3Ô∏è‚É£ Install backend dependencies
      - name: Install backend dependencies
        working-directory: backend
        run: npm ci --only=production

      # 4Ô∏è‚É£ Check server.js for syntax errors
      - name: Check server.js for errors
        working-directory: backend
        run: |
          node --check server.js
          echo "‚úÖ server.js syntax is valid"

      # 5Ô∏è‚É£ Copy frontend to backend/public
      - name: Copy frontend files
        run: |
          rm -rf backend/public/*
          cp -r frontend/* backend/public/

      # 6Ô∏è‚É£ Create web.config for Azure Linux
      - name: Create web.config for Azure
        working-directory: backend
        run: |
          cat > web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
            </system.webServer>
          </configuration>
          EOF
          echo "‚úÖ Created web.config for Azure"

      # 7Ô∏è‚É£ Zip backend for deployment
      - name: Zip backend
        run: |
          cd backend
          zip -r ../${{ env.AZURE_WEBAPP_PACKAGE_PATH }} . -x ".git/*" "node_modules/*" "*.log" ".env.local" "test/*" "counter.json"

      # 8Ô∏è‚É£ Login to Azure
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 9Ô∏è‚É£ Stop the web app before making changes
      - name: Stop Azure Web App
        run: |
          az webapp stop \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}
        continue-on-error: true

      # üîü Wait a moment after stopping
      - name: Wait after stopping
        run: sleep 15

      # 1Ô∏è‚É£1Ô∏è‚É£ Set Azure App Settings (env vars)
      - name: Set Azure App Settings
        run: |
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --settings \
              PORT=8080 \
              NODE_ENV=production \
              SHAREPOINT_TENANT_ID=${{ secrets.SHAREPOINT_TENANT_ID }} \
              SHAREPOINT_CLIENT_ID=${{ secrets.SHAREPOINT_CLIENT_ID }} \
              SHAREPOINT_CLIENT_SECRET=${{ secrets.SHAREPOINT_CLIENT_SECRET }} \
              SHAREPOINT_SITE_EASTERN_CAPE=https://nhbrcsa.sharepoint.com/sites/DL-EasternCapeInspectorate \
              SHAREPOINT_SITE_FREE_STATE=https://nhbrcsa.sharepoint.com/sites/DL-FreeStateInspectorate \
              SHAREPOINT_SITE_GAUTENG=https://nhbrcsa.sharepoint.com/sites/DL-GautengInspectorate \
              SHAREPOINT_SITE_KWAZULU_NATAL=https://nhbrcsa.sharepoint.com/sites/DL-KwaZuluNatalInspectorate \
              SHAREPOINT_SITE_LIMPOPO=https://nhbrcsa.sharepoint.com/sites/DL-LimpopoInspectorate \
              SHAREPOINT_SITE_MPUMALANGA=https://nhbrcsa.sharepoint.com/sites/DL-MpumalangaInspectorate \
              SHAREPOINT_SITE_NORTH_WEST=https://nhbrcsa.sharepoint.com/sites/DL-NorthWestInspectorate \
              SHAREPOINT_SITE_NORTHERN_CAPE=https://nhbrcsa.sharepoint.com/sites/DL-NorthernCapeInspectorate \
              SHAREPOINT_SITE_WESTERN_CAPE=https://nhbrcsa.sharepoint.com/sites/DL-WesternCapeInspectorate

      # 1Ô∏è‚É£2Ô∏è‚É£ Set Azure Startup Command
      - name: Set Azure Startup Command
        run: |
          az webapp config set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --startup-file "npm start"

      # 1Ô∏è‚É£3Ô∏è‚É£ Wait before deployment
      - name: Wait before deployment
        run: sleep 10

      # 1Ô∏è‚É£4Ô∏è‚É£ Deploy to Azure Web App
      - uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'production'
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      # 1Ô∏è‚É£5Ô∏è‚É£ Start the web app after deployment
      - name: Start Azure Web App
        run: |
          az webapp start \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}

      # 1Ô∏è‚É£6Ô∏è‚É£ Replace the health check step with this more detailed debugging:
      - name: Debug application startup
        run: |
          echo "Checking application status..."
          sleep 60  # Wait longer for app to start
          
          # Try multiple endpoints to see what's working
          echo "Testing basic connectivity:"
          curl -v https://${{ env.AZURE_WEBAPP_NAME }}-c4dqgkdde6dhhga8.southafricanorth-01.azurewebsites.net/ || echo "Root endpoint failed"
          
          echo "Testing health endpoint:"
          curl -v https://${{ env.AZURE_WEBAPP_NAME }}-c4dqgkdde6dhhga8.southafricanorth-01.azurewebsites.net/api/health || echo "Health endpoint failed"
          
          echo "Testing if static files are served:"
          curl -v https://${{ env.AZURE_WEBAPP_NAME }}-c4dqgkdde6dhhga8.southafricanorth-01.azurewebsites.net/index.html || echo "Static files not served"
          
          # Check app status
          az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "state"

      # 1Ô∏è‚É£7Ô∏è‚É£ Additional debugging - get recent logs
      - name: Get application logs
        run: |
          echo "Getting application logs..."
          az webapp log download --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --log-file app-logs.zip || echo "Log download failed"
          
          # If download succeeds, try to see what's in there
          if [ -f "app-logs.zip" ]; then
            echo "Log file downloaded, checking contents..."
            unzip -l app-logs.zip || echo "Cannot list zip contents"
          fi

      # 1Ô∏è‚É£8Ô∏è‚É£ Final status check
      - name: Final status check
        run: |
          echo "=== FINAL APPLICATION STATUS ==="
          az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "{Name:name, State:state, ResourceGroup:resourceGroup, DefaultHostName:defaultHostName}" --output table
          
          echo "=== LATEST DEPLOYMENT STATUS ==="
          az webapp deployment list-publishing-credentials --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "status" || echo "Cannot get deployment status"