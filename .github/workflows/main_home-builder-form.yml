name: Build and deploy Node.js app to Azure Web App - home-builder-form

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: 'home-builder-form'
  AZURE_WEBAPP_PACKAGE_PATH: 'release.zip'
  NODE_VERSION: '20.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2️⃣ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      # 3️⃣ Install backend dependencies
      - name: Install backend dependencies
        working-directory: backend
        run: |
          npm ci --only=production
          npm cache clean --force

      # 4️⃣ Copy frontend files into backend/public
      - name: Copy frontend to backend/public
        run: |
          # Clean existing public folder
          rm -rf backend/public/*
          # Copy frontend files
          cp -r frontend/* backend/public/

      # 4.5️⃣ Add web.config for Azure (Windows App Service)
      - name: Add web.config for Azure
        working-directory: backend
        run: |
          cat > web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <webSocket enabled="false" />
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <iisnode node_env="production" />
            </system.webServer>
          </configuration>
          EOF
          echo "✅ web.config created for Azure App Service"

      # 5️⃣ Create production environment file
      - name: Create production .env file
        working-directory: backend
        run: |
          cat > .env << EOF
          PORT=8080
          NODE_ENV=production
          SHAREPOINT_TENANT_ID=${{ secrets.SHAREPOINT_TENANT_ID }}
          SHAREPOINT_CLIENT_ID=${{ secrets.SHAREPOINT_CLIENT_ID }}
          SHAREPOINT_CLIENT_SECRET=${{ secrets.SHAREPOINT_CLIENT_SECRET }}
          # Province-specific SharePoint Sites
          SHAREPOINT_SITE_EASTERN_CAPE=https://nhbrcsa.sharepoint.com/sites/DL-EasternCapeInspectorate
          SHAREPOINT_SITE_FREE_STATE=https://nhbrcsa.sharepoint.com/sites/DL-FreeStateInspectorate
          SHAREPOINT_SITE_GAUTENG=https://nhbrcsa.sharepoint.com/sites/DL-GautengInspectorate
          SHAREPOINT_SITE_KWAZULU_NATAL=https://nhbrcsa.sharepoint.com/sites/DL-KwaZuluNatalInspectorate
          SHAREPOINT_SITE_LIMPOPO=https://nhbrcsa.sharepoint.com/sites/DL-LimpopoInspectorate
          SHAREPOINT_SITE_MPUMALANGA=https://nhbrcsa.sharepoint.com/sites/DL-MpumalangaInspectorate
          SHAREPOINT_SITE_NORTH_WEST=https://nhbrcsa.sharepoint.com/sites/DL-NorthWestInspectorate
          SHAREPOINT_SITE_NORTHERN_CAPE=https://nhbrcsa.sharepoint.com/sites/DL-NorthernCapeInspectorate
          SHAREPOINT_SITE_WESTERN_CAPE=https://nhbrcsa.sharepoint.com/sites/DL-WesternCapeInspectorate
          # Province-specific List Names
          SHAREPOINT_LIST_EASTERN_CAPE=EASTERN CAPE  D1 List
          SHAREPOINT_LIST_FREE_STATE=Free State  D1 List
          SHAREPOINT_LIST_GAUTENG=Gauteng  D1 List
          SHAREPOINT_LIST_KWAZULU_NATAL=KWAZULU NATAL  D1 List
          SHAREPOINT_LIST_LIMPOPO=Limpopo  D1 List
          SHAREPOINT_LIST_MPUMALANGA=MPUMALANGA  D1 List
          SHAREPOINT_LIST_NORTH_WEST=NORTH WEST  D1 List
          SHAREPOINT_LIST_NORTHERN_CAPE=NORTHERN CAPE  D1 List
          SHAREPOINT_LIST_WESTERN_CAPE=WESTERN CAPE  D1 List
          EOF
          echo "✅ Production .env file created"

      # 6️⃣ Verify deployment package contents
      - name: Check deployment package contents
        run: |
          echo "📦 Deployment package contents:"
          cd backend
          find . -name "*.js" -o -name "*.json" -o -name "*.html" -o -name "web.config" -o -name ".env" | head -20
          echo "... and other files"

      # 7️⃣ Zip backend folder for Azure deployment
      - name: Zip backend for deployment
        run: |
          cd backend
          # Exclude development files from production deployment
          zip -r ../${{ env.AZURE_WEBAPP_PACKAGE_PATH }} . \
            -x ".git/*" "node_modules/*" "*.log" ".env.local" "test/*" "counter.json"
          echo "✅ Backend zipped for deployment"

      # 8️⃣ Login to Azure using Service Principal
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 9️⃣ Deploy to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'production'
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          enable-oryx-build: false

      # 🔟 Verify deployment and check health
      - name: Verify deployment health
        run: |
          echo "🔄 Waiting for app to start..."
          sleep 30
          echo "📱 Testing health endpoint..."
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health || true)
          echo "Health endpoint status: $STATUS_CODE"
          
          if [ "$STATUS_CODE" = "200" ]; then
            echo "✅ Application is healthy!"
          else
            echo "⚠️  Health check failed. Checking logs..."
            # Try to get logs
            az webapp log download --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --log-file app_logs.zip 2>/dev/null || true
            if [ -f app_logs.zip ]; then
              unzip -o app_logs.zip -d logs/ 2>/dev/null || true
              echo "📋 Application logs:"
              cat logs/*.log 2>/dev/null | tail -20 || echo "No logs available"
            fi
            echo "❌ Deployment may need troubleshooting"
          fi

      # 📋 Final deployment status
      - name: Deployment status
        run: |
          echo "🎉 Deployment completed!"
          echo "🌐 Web app URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "🏥 Health check: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health"
          echo "📝 Test endpoint: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/test-submit"